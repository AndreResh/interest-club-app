module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: './tsconfig.json' // Убедитесь, что путь корректный
  },
  plugins: ['@typescript-eslint', 'import'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier' // Включаем поддержку Prettier, если используете
  ],
  rules: {
    // 2. Запрещает использование типа "any"
    '@typescript-eslint/no-explicit-any': 'error',
    // Причина: тип "any" нарушает безопасность типов TypeScript, лучше его избегать.

    // 3. Обязательное указание возвращаемого типа для функций
    '@typescript-eslint/explicit-function-return-type': 'off',
    // Причина: может быть полезно в больших проектах, но для гибкости оставим выключенным.

    // 4. Запрет на неявное приведение типов
    'eqeqeq': ['error', 'always'],
    // Причина: неявное приведение типов (использование `==` вместо `===`) может привести к непредсказуемым результатам.

    // 5. Упорядочивание импортов
    'import/order': ['error', { 'newlines-between': 'always' }],
    // Причина: поддерживает единый порядок импортов для улучшения читаемости.

    // 6. Запрещает использовать консоль (оставить только для ошибок)
    'no-console': ['warn', { allow: ['warn', 'error'] }],
    // Причина: "console.log" часто забывают убрать, что плохо для production.

    // 8. Предупреждение о функциях, которые не возвращают значение, но объявлены с типом `void`
    '@typescript-eslint/no-inferrable-types': 'error',
    // Причина: типизация должна быть минимальной, не стоит добавлять `void` или другие типы, которые TypeScript может вывести сам.

    // 9. Запрещает использование ненужных конструкций `await`
    '@typescript-eslint/await-thenable': 'warn',
    // Причина: использование `await` с ненужными промисами или непредвиденными значениями может замедлить выполнение кода.

    // 11. Запрещает деструктуризацию при инициализации переменной, если не все свойства использованы
    '@typescript-eslint/no-unused-vars': ['warn', { 'vars': 'all', 'args': 'after-used', 'ignoreRestSiblings': false }],
    // Причина: деструктуризация позволяет легко игнорировать неиспользуемые свойства.

    // 12. Обязательный стиль кавычек
    'quotes': ['error', 'single', { 'avoidEscape': true }],
    // Причина: единый стиль кавычек делает код более аккуратным и читаемым.

    // 13. Запрещает использование `var`
    'no-var': 'error',
    // Причина: `var` имеет функциональную область видимости, что может привести к ошибкам, лучше использовать `let` или `const`.

    // 14. Обязывает использовать `const` вместо `let` там, где переменная не переопределяется
    'prefer-const': 'error',
    // Причина: использование `const` помогает избежать случайного изменения значений переменных.

    // 15. Запрещает пустые блоки кода
    'no-empty': 'error',
    // Причина: пустые блоки могут быть следствием забытых изменений или некорректной логики.

    // 16. Максимальная длина строки
    'max-len': ['error', { 'code': 100 }],
    // Причина: поддержание длины строки позволяет сделать код более читаемым.

    // 17. Предупреждение о возможности использования "optional chaining"
    '@typescript-eslint/prefer-optional-chain': 'warn',
    // Причина: улучшает читаемость при работе с вложенными объектами и их свойствами.
  }
};
